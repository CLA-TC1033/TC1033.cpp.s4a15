// Test definitions. Do NOT edit this file!

#include <iostream>

#define CATCH_CONFIG_MAIN // defines main() automatically
#include <catch2/catch.hpp>

#include "../Fraccion.hpp"
#include "../opFraccion.hpp"

TEST_CASE("Ex1", "[Constructores]")
{
    Fraccion f1, f2(2,3);
    REQUIRE(f1.getNum()==1);
    REQUIRE(f1.getDen()==2);

    REQUIRE(f2.getNum()==2);
    REQUIRE(f2.getDen()==3);
}

TEST_CASE("Ex2", "[Getters y Setters]")
{
    Fraccion f(5,4);

    REQUIRE(f.getNum()==5);
    REQUIRE(f.getDen()==4);

    f.setNum(2);
    f.setDen(3);

    REQUIRE(f.getNum()==2);
    REQUIRE(f.getDen()==3);
}

TEST_CASE("Ex3", "[Calculando el valor real]")
{
    Fraccion f;

    REQUIRE(f.calcValorReal()==0.5);
}

TEST_CASE("Ex4", "[Suma de Fracciones")
{
    Fraccion f1(2,5), f2(3,10);
    Fraccion f3=sumaFracciones(f1, f2);

    REQUIRE(f3.getNum()==7);
    REQUIRE(f3.getDen()==10);
}

TEST_CASE("Ex5", "[Arreglo de fracciones")
{
    Fraccion af[5];

    af[0].setNum(1);af[0].setDen(2);
    af[1].setNum(2);af[1].setDen(3);
    af[2].setNum(3);af[2].setDen(4);
    af[3].setNum(4);af[4].setDen(5);
    af[4].setNum(5);af[4].setDen(6);

    for (auto i=0; i<5;i++)
    {
        af[i].imprimeFraccion();
    }

    std::cout << "Sumando 1/2 + 2/3" << "\n";   

    af[2]=sumaFracciones(af[0], af[1]);

    std::cout << "Resulta en ";
    af[2].imprimeFraccion();

    REQUIRE(af[2].getNum()==7);
    REQUIRE(af[2].getDen()==6);
}
